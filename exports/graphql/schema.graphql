input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

type AchievementsSection {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  published_at: DateTime
  achievements(sort: String, limit: Int, start: Int, where: JSON): [Achievements]
}

input AchievementsSectionInput {
  title: String!
  achievements: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editAchievementsSectionInput {
  title: String
  achievements: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updateAchievementsSectionInput {
  data: editAchievementsSectionInput
}

type updateAchievementsSectionPayload {
  achievementsSection: AchievementsSection
}

type deleteAchievementsSectionPayload {
  achievementsSection: AchievementsSection
}

type Achievements {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  label: String!
  value: Int!
  published_at: DateTime
}

type AchievementsConnection {
  values: [Achievements]
  groupBy: AchievementsGroupBy
  aggregate: AchievementsAggregator
}

type AchievementsAggregator {
  count: Int
  totalCount: Int
  sum: AchievementsAggregatorSum
  avg: AchievementsAggregatorAvg
  min: AchievementsAggregatorMin
  max: AchievementsAggregatorMax
}

type AchievementsAggregatorSum {
  value: Float
}

type AchievementsAggregatorAvg {
  value: Float
}

type AchievementsAggregatorMin {
  value: Float
}

type AchievementsAggregatorMax {
  value: Float
}

type AchievementsGroupBy {
  id: [AchievementsConnectionId]
  created_at: [AchievementsConnectionCreated_at]
  updated_at: [AchievementsConnectionUpdated_at]
  label: [AchievementsConnectionLabel]
  value: [AchievementsConnectionValue]
  published_at: [AchievementsConnectionPublished_at]
}

type AchievementsConnectionId {
  key: ID
  connection: AchievementsConnection
}

type AchievementsConnectionCreated_at {
  key: DateTime
  connection: AchievementsConnection
}

type AchievementsConnectionUpdated_at {
  key: DateTime
  connection: AchievementsConnection
}

type AchievementsConnectionLabel {
  key: String
  connection: AchievementsConnection
}

type AchievementsConnectionValue {
  key: Int
  connection: AchievementsConnection
}

type AchievementsConnectionPublished_at {
  key: DateTime
  connection: AchievementsConnection
}

input AchievementInput {
  label: String!
  value: Int!
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editAchievementInput {
  label: String
  value: Int
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createAchievementInput {
  data: AchievementInput
}

type createAchievementPayload {
  achievement: Achievements
}

input updateAchievementInput {
  where: InputID
  data: editAchievementInput
}

type updateAchievementPayload {
  achievement: Achievements
}

input deleteAchievementInput {
  where: InputID
}

type deleteAchievementPayload {
  achievement: Achievements
}

type ActionsSection {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  text: String!
  actionButtonText: String!
  noActionsFoundText: String!
  nextActionsSubtitle: String
  previousActionsSubtitle: String
  published_at: DateTime
  nextActions(sort: String, limit: Int, start: Int, where: JSON): [Actions]
  previousActions(sort: String, limit: Int, start: Int, where: JSON): [Actions]
}

input ActionsSectionInput {
  title: String!
  text: String!
  nextActions: [ID]
  previousActions: [ID]
  actionButtonText: String!
  noActionsFoundText: String!
  nextActionsSubtitle: String
  previousActionsSubtitle: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editActionsSectionInput {
  title: String
  text: String
  nextActions: [ID]
  previousActions: [ID]
  actionButtonText: String
  noActionsFoundText: String
  nextActionsSubtitle: String
  previousActionsSubtitle: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updateActionsSectionInput {
  data: editActionsSectionInput
}

type updateActionsSectionPayload {
  actionsSection: ActionsSection
}

type deleteActionsSectionPayload {
  actionsSection: ActionsSection
}

type Actions {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  date: DateTime!
  actionLink: String!
  description: String!
  published_at: DateTime
}

type ActionsConnection {
  values: [Actions]
  groupBy: ActionsGroupBy
  aggregate: ActionsAggregator
}

type ActionsAggregator {
  count: Int
  totalCount: Int
}

type ActionsGroupBy {
  id: [ActionsConnectionId]
  created_at: [ActionsConnectionCreated_at]
  updated_at: [ActionsConnectionUpdated_at]
  name: [ActionsConnectionName]
  date: [ActionsConnectionDate]
  actionLink: [ActionsConnectionActionLink]
  description: [ActionsConnectionDescription]
  published_at: [ActionsConnectionPublished_at]
}

type ActionsConnectionId {
  key: ID
  connection: ActionsConnection
}

type ActionsConnectionCreated_at {
  key: DateTime
  connection: ActionsConnection
}

type ActionsConnectionUpdated_at {
  key: DateTime
  connection: ActionsConnection
}

type ActionsConnectionName {
  key: String
  connection: ActionsConnection
}

type ActionsConnectionDate {
  key: DateTime
  connection: ActionsConnection
}

type ActionsConnectionActionLink {
  key: String
  connection: ActionsConnection
}

type ActionsConnectionDescription {
  key: String
  connection: ActionsConnection
}

type ActionsConnectionPublished_at {
  key: DateTime
  connection: ActionsConnection
}

input ActionInput {
  name: String!
  date: DateTime!
  actionLink: String!
  description: String!
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editActionInput {
  name: String
  date: DateTime
  actionLink: String
  description: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createActionInput {
  data: ActionInput
}

type createActionPayload {
  action: Actions
}

input updateActionInput {
  where: InputID
  data: editActionInput
}

type updateActionPayload {
  action: Actions
}

input deleteActionInput {
  where: InputID
}

type deleteActionPayload {
  action: Actions
}

type DonationsSection {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  buttonText: String!
  text: String!
  sheetLink: String!
  emojiSymbol: String!
  published_at: DateTime
}

input DonationsSectionInput {
  title: String!
  buttonText: String!
  text: String!
  sheetLink: String!
  emojiSymbol: String!
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editDonationsSectionInput {
  title: String
  buttonText: String
  text: String
  sheetLink: String
  emojiSymbol: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updateDonationsSectionInput {
  data: editDonationsSectionInput
}

type updateDonationsSectionPayload {
  donationsSection: DonationsSection
}

type deleteDonationsSectionPayload {
  donationsSection: DonationsSection
}

type Footer {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  socialMediasTitle: String!
  contactEmailTitle: String!
  contactEmail: String!
  published_at: DateTime
  socialMedias(sort: String, limit: Int, start: Int, where: JSON): [SocialMedias]
}

input FooterInput {
  socialMediasTitle: String!
  contactEmailTitle: String!
  contactEmail: String!
  socialMedias: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editFooterInput {
  socialMediasTitle: String
  contactEmailTitle: String
  contactEmail: String
  socialMedias: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updateFooterInput {
  data: editFooterInput
}

type updateFooterPayload {
  footer: Footer
}

type deleteFooterPayload {
  footer: Footer
}

type IntroductionSection {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  buttonText: String!
  backgroundImageLink: String!
  published_at: DateTime
}

input IntroductionSectionInput {
  title: String!
  buttonText: String!
  backgroundImageLink: String!
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editIntroductionSectionInput {
  title: String
  buttonText: String
  backgroundImageLink: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updateIntroductionSectionInput {
  data: editIntroductionSectionInput
}

type updateIntroductionSectionPayload {
  introductionSection: IntroductionSection
}

type deleteIntroductionSectionPayload {
  introductionSection: IntroductionSection
}

type OrgInfo {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  text: String!
  emojiSymbol: String!
  published_at: DateTime
}

type OrgInfoConnection {
  values: [OrgInfo]
  groupBy: OrgInfoGroupBy
  aggregate: OrgInfoAggregator
}

type OrgInfoAggregator {
  count: Int
  totalCount: Int
}

type OrgInfoGroupBy {
  id: [OrgInfoConnectionId]
  created_at: [OrgInfoConnectionCreated_at]
  updated_at: [OrgInfoConnectionUpdated_at]
  title: [OrgInfoConnectionTitle]
  text: [OrgInfoConnectionText]
  emojiSymbol: [OrgInfoConnectionEmojiSymbol]
  published_at: [OrgInfoConnectionPublished_at]
}

type OrgInfoConnectionId {
  key: ID
  connection: OrgInfoConnection
}

type OrgInfoConnectionCreated_at {
  key: DateTime
  connection: OrgInfoConnection
}

type OrgInfoConnectionUpdated_at {
  key: DateTime
  connection: OrgInfoConnection
}

type OrgInfoConnectionTitle {
  key: String
  connection: OrgInfoConnection
}

type OrgInfoConnectionText {
  key: String
  connection: OrgInfoConnection
}

type OrgInfoConnectionEmojiSymbol {
  key: String
  connection: OrgInfoConnection
}

type OrgInfoConnectionPublished_at {
  key: DateTime
  connection: OrgInfoConnection
}

input OrgInfoInput {
  title: String!
  text: String!
  emojiSymbol: String!
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editOrgInfoInput {
  title: String
  text: String
  emojiSymbol: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createOrgInfoInput {
  data: OrgInfoInput
}

type createOrgInfoPayload {
  orgInfo: OrgInfo
}

input updateOrgInfoInput {
  where: InputID
  data: editOrgInfoInput
}

type updateOrgInfoPayload {
  orgInfo: OrgInfo
}

input deleteOrgInfoInput {
  where: InputID
}

type deleteOrgInfoPayload {
  orgInfo: OrgInfo
}

type SocialMedias {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  href: String!
  label: String!
  published_at: DateTime
}

type SocialMediasConnection {
  values: [SocialMedias]
  groupBy: SocialMediasGroupBy
  aggregate: SocialMediasAggregator
}

type SocialMediasAggregator {
  count: Int
  totalCount: Int
}

type SocialMediasGroupBy {
  id: [SocialMediasConnectionId]
  created_at: [SocialMediasConnectionCreated_at]
  updated_at: [SocialMediasConnectionUpdated_at]
  href: [SocialMediasConnectionHref]
  label: [SocialMediasConnectionLabel]
  published_at: [SocialMediasConnectionPublished_at]
}

type SocialMediasConnectionId {
  key: ID
  connection: SocialMediasConnection
}

type SocialMediasConnectionCreated_at {
  key: DateTime
  connection: SocialMediasConnection
}

type SocialMediasConnectionUpdated_at {
  key: DateTime
  connection: SocialMediasConnection
}

type SocialMediasConnectionHref {
  key: String
  connection: SocialMediasConnection
}

type SocialMediasConnectionLabel {
  key: String
  connection: SocialMediasConnection
}

type SocialMediasConnectionPublished_at {
  key: DateTime
  connection: SocialMediasConnection
}

input SocialMediaInput {
  href: String!
  label: String!
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editSocialMediaInput {
  href: String
  label: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createSocialMediaInput {
  data: SocialMediaInput
}

type createSocialMediaPayload {
  socialMedia: SocialMedias
}

input updateSocialMediaInput {
  where: InputID
  data: editSocialMediaInput
}

type updateSocialMediaPayload {
  socialMedia: SocialMedias
}

input deleteSocialMediaInput {
  where: InputID
}

type deleteSocialMediaPayload {
  socialMedia: SocialMedias
}

type TeamMember {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  photoUrl: String!
  published_at: DateTime
}

type TeamMemberConnection {
  values: [TeamMember]
  groupBy: TeamMemberGroupBy
  aggregate: TeamMemberAggregator
}

type TeamMemberAggregator {
  count: Int
  totalCount: Int
}

type TeamMemberGroupBy {
  id: [TeamMemberConnectionId]
  created_at: [TeamMemberConnectionCreated_at]
  updated_at: [TeamMemberConnectionUpdated_at]
  name: [TeamMemberConnectionName]
  photoUrl: [TeamMemberConnectionPhotoUrl]
  published_at: [TeamMemberConnectionPublished_at]
}

type TeamMemberConnectionId {
  key: ID
  connection: TeamMemberConnection
}

type TeamMemberConnectionCreated_at {
  key: DateTime
  connection: TeamMemberConnection
}

type TeamMemberConnectionUpdated_at {
  key: DateTime
  connection: TeamMemberConnection
}

type TeamMemberConnectionName {
  key: String
  connection: TeamMemberConnection
}

type TeamMemberConnectionPhotoUrl {
  key: String
  connection: TeamMemberConnection
}

type TeamMemberConnectionPublished_at {
  key: DateTime
  connection: TeamMemberConnection
}

input TeamMemberInput {
  name: String!
  photoUrl: String!
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editTeamMemberInput {
  name: String
  photoUrl: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createTeamMemberInput {
  data: TeamMemberInput
}

type createTeamMemberPayload {
  teamMember: TeamMember
}

input updateTeamMemberInput {
  where: InputID
  data: editTeamMemberInput
}

type updateTeamMemberPayload {
  teamMember: TeamMember
}

input deleteTeamMemberInput {
  where: InputID
}

type deleteTeamMemberPayload {
  teamMember: TeamMember
}

type TeamMembersSection {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  text: String!
  published_at: DateTime
  teamMembers(sort: String, limit: Int, start: Int, where: JSON): [TeamMember]
}

input TeamMembersSectionInput {
  title: String!
  text: String!
  teamMembers: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editTeamMembersSectionInput {
  title: String
  text: String
  teamMembers: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updateTeamMembersSectionInput {
  data: editTeamMembersSectionInput
}

type updateTeamMembersSectionPayload {
  teamMembersSection: TeamMembersSection
}

type deleteTeamMembersSectionPayload {
  teamMembersSection: TeamMembersSection
}

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | AchievementsSection | updateAchievementsSectionPayload | deleteAchievementsSectionPayload | Achievements | AchievementsConnection | AchievementsAggregator | AchievementsAggregatorSum | AchievementsAggregatorAvg | AchievementsAggregatorMin | AchievementsAggregatorMax | AchievementsGroupBy | AchievementsConnectionId | AchievementsConnectionCreated_at | AchievementsConnectionUpdated_at | AchievementsConnectionLabel | AchievementsConnectionValue | AchievementsConnectionPublished_at | createAchievementPayload | updateAchievementPayload | deleteAchievementPayload | ActionsSection | updateActionsSectionPayload | deleteActionsSectionPayload | Actions | ActionsConnection | ActionsAggregator | ActionsGroupBy | ActionsConnectionId | ActionsConnectionCreated_at | ActionsConnectionUpdated_at | ActionsConnectionName | ActionsConnectionDate | ActionsConnectionActionLink | ActionsConnectionDescription | ActionsConnectionPublished_at | createActionPayload | updateActionPayload | deleteActionPayload | DonationsSection | updateDonationsSectionPayload | deleteDonationsSectionPayload | Footer | updateFooterPayload | deleteFooterPayload | IntroductionSection | updateIntroductionSectionPayload | deleteIntroductionSectionPayload | OrgInfo | OrgInfoConnection | OrgInfoAggregator | OrgInfoGroupBy | OrgInfoConnectionId | OrgInfoConnectionCreated_at | OrgInfoConnectionUpdated_at | OrgInfoConnectionTitle | OrgInfoConnectionText | OrgInfoConnectionEmojiSymbol | OrgInfoConnectionPublished_at | createOrgInfoPayload | updateOrgInfoPayload | deleteOrgInfoPayload | SocialMedias | SocialMediasConnection | SocialMediasAggregator | SocialMediasGroupBy | SocialMediasConnectionId | SocialMediasConnectionCreated_at | SocialMediasConnectionUpdated_at | SocialMediasConnectionHref | SocialMediasConnectionLabel | SocialMediasConnectionPublished_at | createSocialMediaPayload | updateSocialMediaPayload | deleteSocialMediaPayload | TeamMember | TeamMemberConnection | TeamMemberAggregator | TeamMemberGroupBy | TeamMemberConnectionId | TeamMemberConnectionCreated_at | TeamMemberConnectionUpdated_at | TeamMemberConnectionName | TeamMemberConnectionPhotoUrl | TeamMemberConnectionPublished_at | createTeamMemberPayload | updateTeamMemberPayload | deleteTeamMemberPayload | TeamMembersSection | updateTeamMembersSectionPayload | deleteTeamMembersSectionPayload | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | createUserPayload | updateUserPayload | deleteUserPayload

input InputID {
  id: ID!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type AdminUser {
  id: ID!
  username: String
  firstname: String!
  lastname: String!
}

type Query {
  achievementsSection(publicationState: PublicationState): AchievementsSection
  achievement(id: ID!, publicationState: PublicationState): Achievements
  achievements(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Achievements]
  achievementsConnection(sort: String, limit: Int, start: Int, where: JSON): AchievementsConnection
  actionsSection(publicationState: PublicationState): ActionsSection
  action(id: ID!, publicationState: PublicationState): Actions
  actions(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Actions]
  actionsConnection(sort: String, limit: Int, start: Int, where: JSON): ActionsConnection
  donationsSection(publicationState: PublicationState): DonationsSection
  footer(publicationState: PublicationState): Footer
  introductionSection(publicationState: PublicationState): IntroductionSection
  orgInfo(id: ID!, publicationState: PublicationState): OrgInfo
  orgInfos(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [OrgInfo]
  orgInfosConnection(sort: String, limit: Int, start: Int, where: JSON): OrgInfoConnection
  socialMedia(id: ID!, publicationState: PublicationState): SocialMedias
  socialMedias(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [SocialMedias]
  socialMediasConnection(sort: String, limit: Int, start: Int, where: JSON): SocialMediasConnection
  teamMember(id: ID!, publicationState: PublicationState): TeamMember
  teamMembers(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [TeamMember]
  teamMembersConnection(sort: String, limit: Int, start: Int, where: JSON): TeamMemberConnection
  teamMembersSection(publicationState: PublicationState): TeamMembersSection
  files(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

type Mutation {
  updateAchievementsSection(input: updateAchievementsSectionInput): updateAchievementsSectionPayload
  deleteAchievementsSection: deleteAchievementsSectionPayload
  createAchievement(input: createAchievementInput): createAchievementPayload
  updateAchievement(input: updateAchievementInput): updateAchievementPayload
  deleteAchievement(input: deleteAchievementInput): deleteAchievementPayload
  updateActionsSection(input: updateActionsSectionInput): updateActionsSectionPayload
  deleteActionsSection: deleteActionsSectionPayload
  createAction(input: createActionInput): createActionPayload
  updateAction(input: updateActionInput): updateActionPayload
  deleteAction(input: deleteActionInput): deleteActionPayload
  updateDonationsSection(input: updateDonationsSectionInput): updateDonationsSectionPayload
  deleteDonationsSection: deleteDonationsSectionPayload
  updateFooter(input: updateFooterInput): updateFooterPayload
  deleteFooter: deleteFooterPayload
  updateIntroductionSection(input: updateIntroductionSectionInput): updateIntroductionSectionPayload
  deleteIntroductionSection: deleteIntroductionSectionPayload
  createOrgInfo(input: createOrgInfoInput): createOrgInfoPayload
  updateOrgInfo(input: updateOrgInfoInput): updateOrgInfoPayload
  deleteOrgInfo(input: deleteOrgInfoInput): deleteOrgInfoPayload
  createSocialMedia(input: createSocialMediaInput): createSocialMediaPayload
  updateSocialMedia(input: updateSocialMediaInput): updateSocialMediaPayload
  deleteSocialMedia(input: deleteSocialMediaInput): deleteSocialMediaPayload
  createTeamMember(input: createTeamMemberInput): createTeamMemberPayload
  updateTeamMember(input: updateTeamMemberInput): updateTeamMemberPayload
  deleteTeamMember(input: deleteTeamMemberInput): deleteTeamMemberPayload
  updateTeamMembersSection(input: updateTeamMembersSectionInput): updateTeamMembersSectionPayload
  deleteTeamMembersSection: deleteTeamMembersSectionPayload

  """Delete one file"""
  deleteFile(input: deleteFileInput): deleteFilePayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

"""The `Upload` scalar type represents a file upload."""
scalar Upload
